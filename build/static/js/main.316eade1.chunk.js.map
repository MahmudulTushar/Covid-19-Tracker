{"version":3,"sources":["InfoBox.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","active","isRed","cases","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDatapoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","console","log","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","setCasesType","mapCountries","setMapCountries","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountiresData","onCountryChange","target","event","countryCode","mapObj","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.316eade1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card, CardContent,Typography} from '@material-ui/core'\r\nimport './InfoBox.css'\r\nfunction InfoBox({title, active, isRed,  cases, total, ...props}) {\r\n  return (\r\n      <Card\r\n      onClick={props.onClick}                                             \r\n      className = {`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`} >\r\n        <CardContent>\r\n          <Typography className = \"infoBox__titls\" color = \"textSecondary\">{title}</Typography>\r\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`} >{cases}</h2>\r\n          <Typography className = \"infoBox__total\" color = \"textSecondary\">{total} total</Typography>\r\n        </CardContent>  \r\n      </Card> \r\n  )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\n\r\nexport const sortData = (data) =>{\r\n  const sortedData = [...data];\r\n  sortedData.sort((a,b) =>{\r\n    if (a.cases > b.cases)\r\n    {\r\n      return -1;\r\n    }  \r\n    else\r\n    {\r\n      return 1;\r\n    }\r\n  })\r\n  return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>{\r\n  return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n}\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>{\r\n  return data.map((country) => (\r\n    <Circle\r\n    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n    color={casesTypeColors[casesType].hex}\r\n    fillColor={casesTypeColors[casesType].hex}\r\n    fillOpacity={0.4}\r\n    radius={\r\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n    }\r\n    >\r\n    <Popup>\r\n      <div className=\"info-container\">\r\n        <div\r\n          className=\"info-flag\"\r\n          style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n        ></div>\r\n        <div className=\"info-name\">{country.country}</div>\r\n        <div className=\"info-confirmed\">\r\n          Cases: {numeral(country.cases).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-recovered\">\r\n          Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-deaths\">\r\n          Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n        </div>\r\n      </div> \r\n    </Popup>\r\n    </Circle>\r\n  ));\r\n}","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport './Map.css';\r\nimport { showDataOnMap } from \"./utils\";\r\nfunction Map({countries, casesType, center, zoom}) {\r\n  return (\r\n    <div className = \"map\">\r\n      <LeafletMap center={center} zoom = {zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\nconst Table = ({countries}) => {\r\n  return (\r\n    <div className = \"table\"> \r\n      {\r\n        countries.map(({country,cases})=>(\r\n          <tr>\r\n           <td>{country}</td> \r\n           <td>\r\n              <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n           </td>            \r\n          </tr>  \r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") =>{\r\n  const chartData = [];\r\n  let lastDatapoint;\r\n for(let date in data.cases){\r\n    if (lastDatapoint)\r\n    {\r\n      const newDataPoint ={\r\n        x: date,\r\n        y: data[casesType][date] - lastDatapoint\r\n      }\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDatapoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n}\r\n\r\nfunction LineGraph({ casesType = \"cases\"}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      console.log('cahar1');\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n           const  chartData = buildChartData(data, casesType);\r\n           setData(chartData);\r\n        });\r\n        console.log('cahar2');\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length>0 && (<Line data = {{\r\n        datasets:[{\r\n          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n          borderColor: \"#CC1034\",\r\n          data : data\r\n        }]\r\n        }}\r\n      \r\n      options={options} />)\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport{Card, CardContent, FormControl, MenuItem, Select} from '@material-ui/core'\nimport Infobox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport {sortData, prettyPrintStat} from './utils'\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('WorldWide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  \n  useEffect(() =>{\n      const getCountiresData = async()=>{\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n              .then((response) => response.json())\n              .then((data)=>{\n                const countries = data.map((country)=>(\n                  {\n                    name: country.country,\n                    value: country.countryInfo.iso2\n                  })) \n\n                  const sortedData = sortData(data);\n                  setTableData(sortedData);\n                  setCountries(countries);  \n                  setMapCountries(data);\n              })\n      }\n    getCountiresData();\n  },[])\n\n  useEffect(() =>{\n    let tempObject = {target:{value:\"WorldWide\"}};\n    onCountryChange(tempObject);\n},[])\n\nconst onCountryChange = async(event) =>\n{\n  const countryCode = event.target.value;\n  const url = countryCode === \"WorldWide\" ? \"https://disease.sh/v3/covid-19/all\" :\n                                          `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n  await fetch(url)\n  .then(response => response.json())\n  .then(data => {\n    setCountry(countryCode);\n    setCountryInfo(data);\n    const mapObj = countryCode === \"WorldWide\" ? { lat: 34.80746, lng: -40.4796 } : { lat: data.countryInfo.lat, lng: data.countryInfo.long };\n    setMapCenter(mapObj);\n    setMapZoom(4);\n  })\n}\n  return (\n    <div className=\"app\">\n      <div className = \"app__left\">\n        <div className = \"app__header\">\n          <h1>COVID-19 Tracker</h1>\n            <FormControl className = \"app__dropdown\">\n              <Select variant = \"outlined\" value = {country} onChange = {onCountryChange}>\n              <MenuItem value =\"WorldWide\">World Wide</MenuItem>\n              {  countries.map((country) =>(\n                  <MenuItem value ={country.value}>{country.name}</MenuItem>\n              ))}\n              </Select>\n            </FormControl>\n        </div>\n        <div className = \"app__stats\">\n          <Infobox active = {casesType === 'cases'} isRed onClick={(e) => setCasesType(\"cases\")} title = \"Coronavirus Cases\"  cases = {prettyPrintStat(countryInfo.todayCases)} total = {countryInfo.cases}/>     \n          <Infobox active = {casesType === 'recovered'} onClick={(e) => setCasesType(\"recovered\")} title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total = {countryInfo.recovered}/>\n          <Infobox active = {casesType === 'deaths'} isRed onClick={(e) => setCasesType(\"deaths\")} title = \"Death\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {countryInfo.deaths}/>   \n        </div>  \n        <Map countries = {mapCountries} casesType= {casesType} center={mapCenter} zoom = {mapZoom}/>\n      </div>\n      <Card className = \"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries = {tableData}/>\n          <h3>Worldwide new {casesType}</h3>\n          {/* Graph */}\n          <LineGraph casesType = {casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}